[{"name":"app.R","content":"#step_through_every_narrative\r\n\r\nlibrary(shiny)\r\nlibrary(forcats)\r\nlibrary(dplyr)\r\nlibrary(ggplot2)\r\n\r\nsetwd('C:/xxu/u_college_R_Shiny/week_14')\r\n\r\nif (!exists(\"injuries\")) {\r\n  injuries <- vroom::vroom(\"neiss/injuries.tsv.gz\")\r\n  products <- vroom::vroom(\"neiss/products.tsv\")\r\n  population <- vroom::vroom(\"neiss/population.tsv\")\r\n}\r\n\r\ncount_top <- function(df, var, n = 5) {\r\n  df %>%\r\n    mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%\r\n    group_by({{ var }}) %>%\r\n    summarise(n = as.integer(sum(weight)))\r\n}\r\n\r\nui <- fluidPage(\r\n  fluidRow(\r\n    column(8, selectInput(\"code\", \"Product\",\r\n                          choices = setNames(products$prod_code, products$title),\r\n                          width = \"100%\")\r\n    ),\r\n    column(2, numericInput(\"rows\", \"Number of Rows\",\r\n                           min = 1, max = 10, value = 5)),\r\n    column(2, selectInput(\"y\", \"Y Axis\", c(\"rate\", \"count\")))\r\n  ),\r\n  fluidRow(\r\n    column(4, tableOutput(\"diag\")),\r\n    column(4, tableOutput(\"body_part\")),\r\n    column(4, tableOutput(\"location\"))\r\n  ),\r\n  fluidRow(\r\n    column(12, plotOutput(\"age_sex\"))\r\n  ),\r\n  fluidRow(\r\n    column(2, actionButton(\"prev_story\", \"Previous story\")),\r\n    column(2, actionButton(\"next_story\", \"Next story\")),\r\n    column(8, textOutput(\"narrative\"))\r\n  )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  selected <- reactive(injuries %>% filter(prod_code == input$code))\r\n  \r\n  # Find the maximum possible of rows.\r\n  max_no_rows <- reactive(\r\n    max(length(unique(selected()$diag)),\r\n        length(unique(selected()$body_part)),\r\n        length(unique(selected()$location)))\r\n  )\r\n  \r\n  # Update the maximum value for the numericInput based on max_no_rows().\r\n  observeEvent(input$code, {\r\n    updateNumericInput(session, \"rows\", max = max_no_rows())\r\n  })\r\n  \r\n  table_rows <- reactive(input$rows - 1) #here, if n=5, \"fct_lump(fct_infreq...\" will add \"other\", give 6, so that n-1=4, in order to get 5\r\n  \r\n  output$diag <- renderTable(\r\n    count_top(selected(), diag, n = table_rows()), width = \"100%\")\r\n  \r\n  output$body_part <- renderTable(\r\n    count_top(selected(), body_part, n = table_rows()), width = \"100%\")\r\n  \r\n  output$location <- renderTable(\r\n    count_top(selected(), location, n = table_rows()), width = \"100%\")\r\n  \r\n  summary <- reactive({\r\n    selected() %>%\r\n      count(age, sex, wt = weight) %>%\r\n      left_join(population, by = c(\"age\", \"sex\")) %>%\r\n      mutate(rate = n / population * 1e4)\r\n  })\r\n  \r\n  output$age_sex <- renderPlot({\r\n    if (input$y == \"count\") {\r\n      summary() %>%\r\n        ggplot(aes(age, n, colour = sex)) +\r\n        geom_line() +\r\n        labs(y = \"Estimated number of injuries\") +\r\n        theme_grey(15)\r\n    } else {\r\n      summary() %>%\r\n        ggplot(aes(age, rate, colour = sex)) +\r\n        geom_line(na.rm = TRUE) +\r\n        labs(y = \"Injuries per 10,000 people\") +\r\n        theme_grey(15)\r\n    }\r\n  })\r\n  \r\n  # Store the maximum possible number of stories.\r\n  max_no_stories <- reactive(length(selected()$narrative))\r\n  \r\n  # Reactive used to save the current position in the narrative list.\r\n  story <- reactiveVal(1) # get current position;\r\n  \r\n  # Reset the story counter if the user changes the product code. \r\n  observeEvent(input$code, {\r\n    story(1) # get the first position---reset;\r\n  })\r\n  \r\n  # When the user clicks \"Next story\", increase the current position in the\r\n  # narrative but never go beyond the interval [1, length of the narrative].\r\n  # Note that the mod function (%%) is keeping `current`` within this interval.\r\n  observeEvent(input$next_story, {\r\n    story((story() %% max_no_stories()) + 1) #here, +1 = increase by 1;\r\n  })\r\n  \r\n  # When the user clicks \"Previous story\" decrease the current position in the\r\n  # narrative. Note that we also take advantage of the mod function.\r\n  # observeEvent(input$prev_story, {\r\n  #   story(((story() - 2) %% max_no_stories()) + 1)\r\n  # })\r\n  observeEvent(input$prev_story, {\r\n    story(((story() - 1) %% max_no_stories()) ) #here, -1 = decrease by 1;\r\n  })\r\n  \r\n  output$narrative <- renderText({\r\n    selected()$narrative[story()]\r\n  })\r\n}\r\n\r\nshinyApp(ui, server)","type":"text"}]
